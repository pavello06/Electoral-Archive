Unit PositiveNumberEditUnit;

Interface

Uses
    Winapi.Windows, System.SysUtils, System.Classes, Vcl.StdCtrls, Clipbrd;

Procedure EditContextPopup(Sender: TObject; Var Handled: Boolean; Const MIN_NUM, MAX_NUM: Integer);
Procedure EditKeyDown(Sender: TObject; Var Key: Word; Shift: TShiftState; Const MIN_NUM, MAX_NUM: Integer);
Procedure EditKeyPress(Sender: TObject; Var Key: Char; Const MIN_NUM, MAX_NUM: Integer);
Procedure EditKeyUp(Sender: TObject);

Var
    CtrlPressed: Boolean = False;

Implementation

Const
    ENTER = #13;
    BACKSPACE = #8;
    NONE = #0;
    DIGITS = ['0'..'9'];
    DIGITS_WITHOUT_ZERO = ['1'..'9'];
    ALPHABET = ['A'..'Z', 'a'..'z'];

Function IsValidRange(Num: Integer; Const MIN, MAX: Integer) : Boolean;
Begin
    IsValidRange := (Num >= MIN) And (Num <= MAX);
End;

Function IsPossiblePaste(SelStart, SelLength: Integer; Text: String; Const MIN, MAX: Integer) : Boolean;
Var
    Num: Integer;
Begin
    IsPossiblePaste := Clipboard.HasFormat(CF_TEXT) And (Length(ClipBoard.AsText) <> 0) And
                       TryStrToInt(Copy(Text, 1, SelStart) + ClipBoard.AsText + Copy(Text, SelStart + SelLength + 1), Num) And
                       ((SelStart = 0) And (ClipBoard.AsText[1] <> '0') Or (SelStart > 0)) And
                       IsValidRange(StrToInt(Copy(Text, 1, SelStart) + ClipBoard.AsText + Copy(Text, SelStart + SelLength + 1)), MIN, MAX);
End;

Function IsValidChar(SelStart: Integer; Key: Char) : Boolean;
Begin
    IsValidChar := (SelStart = 0) And CharInSet(Key, DIGITS_WITHOUT_ZERO) Or (SelStart > 0) And CharInSet(Key, DIGITS);
End;


Procedure EditContextPopup(Sender: TObject; Var Handled: Boolean; Const MIN_NUM, MAX_NUM: Integer);
Begin
    With TEdit(Sender) Do
    Begin
        If Not IsPossiblePaste(SelStart, SelLength, Text, MIN_NUM, MAX_NUM) Or
           (SelLength = 0) And (SelStart = 1) And (Length(Text) > 1) And (Text[2] = '0') Or
           (SelLength > 0) And (SelStart = 0) And (SelLength <> Length(Text)) And (Text[SelLength + 1] = '0') Then
            Handled := True;
    End;
End;

Procedure EditKeyDown(Sender: TObject; Var Key: Word; Shift: TShiftState; Const MIN_NUM, MAX_NUM: Integer);
Begin
    With TEdit(Sender) Do
    Begin
        If (Shift = [ssCtrl]) And (UpCase(Chr(Key)) = 'X') Then
        Begin
            If (SelLength = 0) And (SelStart = 1) And (Length(Text) > 1) And (Text[2] = '0') Or
               (SelLength > 0) And (SelStart = 0) And (SelLength <> Length(Text)) And (Text[SelLength + 1] = '0') Then
                Key := Ord(NONE);
        End
        Else If Key = VK_DELETE Then
        Begin
            If (SelLength = 0) And (SelStart = 0) And (Length(Text) > 1) And (Text[2] = '0') Or
               (SelLength > 0) And (SelStart = 0) And (SelLength <> Length(Text)) And (Text[SelLength + 1] = '0') Then
                Key := Ord(NONE);
        End
        Else If (Shift = [ssCtrl]) And (UpCase(Chr(Key)) = 'V') Or (Shift = [ssShift]) And (Key = VK_INSERT) Then
        Begin
            If Not IsPossiblePaste(SelStart, SelLength, Text, MIN_NUM, MAX_NUM) Then
                Key := Ord(NONE);
        End;
        If (Shift = [ssCtrl]) And CharInSet(Chr(Key), ALPHABET) Then
            CtrlPressed := True;
    End;
End;

Procedure EditKeyPress(Sender: TObject; Var Key: Char; Const MIN_NUM, MAX_NUM: Integer);
Begin
    With TEdit(Sender) Do
    Begin
        If Key = BACKSPACE Then
        Begin
           If (SelLength = 0) And (SelStart = 1) And (Length(Text) > 1) And (Text[2] = '0') Or
              (SelLength > 0) And (SelStart = 0) And (SelLength <> Length(Text)) And (Text[SelLength + 1] = '0') Then
               Key := NONE;
        End
        Else If Not CtrlPressed Then
        Begin
            If Not (IsValidChar(SelStart, Key) And IsValidRange(StrToInt(Copy(Text, 1, SelStart) + Key + Copy(Text, SelStart + SelLength + 1)), MIN_NUM, MAX_NUM)) Then
                Key := NONE;
        End;
    End;
End;

Procedure EditKeyUp(Sender: TObject);
Begin
    CtrlPressed := False;
End;

End.
